// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

	static Array bit_masks;

    /** Initializes the library. */
    function void init() {
		var int i, val;
		let bit_masks = Array.new(16);
		
		let i = 0;
		let val = 1;
		while (i  < 16 ) {
			let bit_masks[i] = val;
			let val = val * 2;
			let i = i + 1;
		}
		return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
		if (x < 0) {
	      let x = -x;
	    }

	    return x;
    }

  function boolean bit(int x, int n) {
        return ~((x & bit_masks[n]) = 0);
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
		// ineficiente
		var int sum, i;
		let i = 0;
    	let sum = 0;
		if (x < 0) {
			let x = -x;
			let y = -y;
		}

        while( i < x ) {   
    		let sum = sum + y;
			let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {

 	var int q;

    if (x < 0) {
      return -Math.divide(-x, y);
    }

    if (y < 0) {
      return -Math.divide(x, -y);
    }

    if (y > x) {
      return 0;
    }

    let q = Math.divide(x, y + y);

    if ((x - (2 * q * y)) < y) {
      return q + q;
    } else {
      return q + q + 1;
    }

    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
		var int j, y;
	        var int approx;
	        var int approx_squared;

	        let y = 0;
	        let j = 7;      
	        while( ~(j < 0) ) {
	            let approx = y + bit_masks[j];
	            let approx_squared = approx * approx;
	            if( ~(approx_squared > x) & (approx_squared > 0) ) {    
	                let y = approx;
	            }
	            let j = j - 1;
	        }
	        return y;
    }

  /** Returns the greater number. */
  function int max(int a, int b) {
    if (a > b) {
      return a;
    }

    return b;
  }

  /** Returns the smaller number. */
  function int min(int a, int b) {
    if (a < b) {
      return a;
    }

    return b;
  }
}
