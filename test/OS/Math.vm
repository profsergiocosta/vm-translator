function Math.init 2
push constant 16
call Array.new 1
pop static 0
push constant 0
pop local 0
push constant 1
pop local 1
label Math_WHILE_EXP0
push local 0
push constant 16
lt
not
if-goto Math_WHILE_END0
push local 0
push static 0
add
push local 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push constant 2
call Math.multiply 2
pop local 1
push local 0
push constant 1
add
pop local 0
goto Math_WHILE_EXP0
label Math_WHILE_END0
push constant 0
return
function Math.abs 0
push argument 0
push constant 0
lt
if-goto Math_IF_TRUE0
goto Math_IF_FALSE0
label Math_IF_TRUE0
push argument 0
neg
pop argument 0
label Math_IF_FALSE0
push argument 0
return
function Math.bit 0
push argument 0
push argument 1
push static 0
add
pop pointer 1
push that 0
and
push constant 0
eq
not
return
function Math.multiply 2
push constant 0
pop local 1
push constant 0
pop local 0
push argument 0
push constant 0
lt
if-goto Math_IF_TRUE1
goto Math_IF_FALSE1
label Math_IF_TRUE1
push argument 0
neg
pop argument 0
push argument 1
neg
pop argument 1
label Math_IF_FALSE1
label Math_WHILE_EXP1
push local 1
push argument 0
lt
not
if-goto Math_WHILE_END1
push local 0
push argument 1
add
pop local 0
push local 1
push constant 1
add
pop local 1
goto Math_WHILE_EXP1
label Math_WHILE_END1
push local 0
return
function Math.divide 1
push argument 0
push constant 0
lt
if-goto Math_IF_TRUE2
goto Math_IF_FALSE2
label Math_IF_TRUE2
push argument 0
neg
push argument 1
call Math.divide 2
neg
return
label Math_IF_FALSE2
push argument 1
push constant 0
lt
if-goto Math_IF_TRUE3
goto Math_IF_FALSE3
label Math_IF_TRUE3
push argument 0
push argument 1
neg
call Math.divide 2
neg
return
label Math_IF_FALSE3
push argument 1
push argument 0
gt
if-goto Math_IF_TRUE4
goto Math_IF_FALSE4
label Math_IF_TRUE4
push constant 0
return
label Math_IF_FALSE4
push argument 0
push argument 1
push argument 1
add
call Math.divide 2
pop local 0
push argument 0
push constant 2
push local 0
call Math.multiply 2
push argument 1
call Math.multiply 2
sub
push argument 1
lt
if-goto Math_IF_TRUE5
goto Math_IF_FALSE5
label Math_IF_TRUE5
push local 0
push local 0
add
return
goto Math_IF_END5
label Math_IF_FALSE5
push local 0
push local 0
add
push constant 1
add
return
label Math_IF_END5
function Math.sqrt 4
push constant 0
pop local 1
push constant 7
pop local 0
label Math_WHILE_EXP2
push local 0
push constant 0
lt
not
not
if-goto Math_WHILE_END2
push local 1
push local 0
push static 0
add
pop pointer 1
push that 0
add
pop local 2
push local 2
push local 2
call Math.multiply 2
pop local 3
push local 3
push argument 0
gt
not
push local 3
push constant 0
gt
and
if-goto Math_IF_TRUE6
goto Math_IF_FALSE6
label Math_IF_TRUE6
push local 2
pop local 1
label Math_IF_FALSE6
push local 0
push constant 1
sub
pop local 0
goto Math_WHILE_EXP2
label Math_WHILE_END2
push local 1
return
function Math.max 0
push argument 0
push argument 1
gt
if-goto Math_IF_TRUE7
goto Math_IF_FALSE7
label Math_IF_TRUE7
push argument 0
return
label Math_IF_FALSE7
push argument 1
return
function Math.min 0
push argument 0
push argument 1
lt
if-goto Math_IF_TRUE8
goto Math_IF_FALSE8
label Math_IF_TRUE8
push argument 0
return
label Math_IF_FALSE8
push argument 1
return
